package dao_cmd

import "github.com/8treenet/gotree/framework"

func init() {
	//UserGet加入熔断 条件:15秒内 %50超时, 60秒后恢复
	framework.RegisterBreaker(new(OrderList), 15, 0.5, 60)
}

//orderCmdBase
type orderCmdBase struct {
	framework.CallCmd
}

func (this *orderCmdBase) Gotree(child ...interface{}) *orderCmdBase {
	this.CallCmd.Gotree(this)
	this.AddChild(this, child...)
	return this
}

// Control
func (this *orderCmdBase) Control() string {
	return "Order"
}

// 多态方法重写 ComAddr 用于多 Dao 时的分布规则。
func (this *orderCmdBase) ComAddr(rn framework.ComNode) string {
	//分布于dao.conf配置相关
	//rn.RandomAddr() 随机节点访问
	//rn.BalanceAddr() 负载均衡节点访问
	//rn.DummyHashAddr(123) 一致性哈希节点访问
	//rn.AllNode() 获取全部节点, 和节点的dao_extra， 自定义方式访问
	//rn.SlaveAddr()  //返回随机从节点  主节点:节点id=1,当只有主节点返回主节点
	//rn.MasterAddr() //返回主节点 主节点:节点id=1
	return rn.RandomAddr()
}

// OrderAdd 下单
type OrderAdd struct {
	orderCmdBase //继承orderCmdBase
	ProductId    int64
	UserId       int64
}

func (this *OrderAdd) Gotree(productId, userId int64) *OrderAdd {
	this.orderCmdBase.Gotree(this)
	this.ProductId = productId
	this.UserId = userId
	return this
}

func (this *OrderAdd) Action() string {
	return "Add"
}

// OrderList 订单列表
type OrderList struct {
	orderCmdBase //继承orderCmdBase
	UserId       int64
}

func (this *OrderList) Gotree(userId int64) *OrderList {
	this.orderCmdBase.Gotree(this)
	this.UserId = userId
	return this
}

func (this *OrderList) Action() string {
	return "List"
}
